{"version":3,"sources":["components/Header.js","components/Serach.js","components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","Serach","props","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","Movie","movie","poster","Poster","Title","width","alt","src","Year","initState","loading","movies","error","reducer","state","action","payload","erorr","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Search","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"yPAUeA,G,MARD,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACZ,OACI,4BAAQC,UAAU,cACd,4BAAKD,MC0BFE,EA7BA,SAACC,GAAU,IAAD,EAEgBC,mBAAS,IAFzB,mBAEdC,EAFc,KAEDC,EAFC,KAiBrB,OACI,0BAAML,UAAU,UACZ,2BACAM,MAAQF,EACRG,SAjBwB,SAACC,GAC7BH,EAAeG,EAAEC,OAAOH,QAiBpBI,KAAK,SAEH,2BAAOC,QAZS,SAACH,GACvBA,EAAEI,iBACFV,EAAMW,OAAOT,GALbC,EAAe,KAe2BK,KAAK,SAASJ,MAAM,aCHvDQ,EAlBF,SAAC,GAAY,IAAXC,EAAU,EAAVA,MAELC,EAAyB,QAAhBD,EAAME,OAJvB,qGAIqEF,EAAME,OACzE,OACI,yBAAKjB,UAAU,SACX,4BAAKe,EAAMG,OACX,6BACI,yBACAC,MAAM,MACNC,IAAG,6BAAyBL,EAAMhB,OAClCsB,IAAOL,KAGX,+BAAKD,EAAMO,KAAX,OCVNC,EAAY,CAChBC,SAAS,EACTC,OAAQ,GACRC,OAAO,GAGHC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOnB,MACb,IAAK,wBACH,OAAO,eACFkB,EADL,CAEEJ,SAAS,EACTE,MAAO,OAEX,IAAK,wBACH,OAAO,eACFE,EADL,CAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,eACFF,EADL,CAEEJ,SAAS,EACTO,MAAOF,EAAOH,QAElB,QACE,OAAOE,IA+DEI,EAzDH,WAAO,IAAD,EAESC,qBAAWN,EAAQJ,GAF5B,mBAETK,EAFS,KAEHM,EAFG,KAKhBC,qBAAU,WACRC,MAzCkB,kDA0CfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EACE,CACExB,KAAK,wBACLoB,QAAQU,EAAaC,cAI5B,IAGH,IAsBMhB,EAA2BG,EAA3BH,OAAQC,EAAmBE,EAAnBF,MAAOF,EAAYI,EAAZJ,QAErB,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAAQD,MAAO,WACf,kBAAC,EAAD,CAAQc,OA3BG,SAAAT,GACb8B,EAAS,CACPxB,KAAM,0BAGR0B,MAAM,8BAAD,OAA+BhC,EAA/B,qBACJiC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaE,SACfR,EAAS,CACLxB,KAAM,wBACNoB,QAASU,EAAaC,SAG1BP,EAAS,CACLxB,KAAM,wBACNgB,MAAOc,EAAaG,cAY1B,uBAAG3C,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACZwB,IAAYE,EAAS,4CAA2BA,EAAS,yBAAK1B,UAAU,gBAAgB0B,GAAiBD,EAAOmB,KAAI,SAAC7B,EAAO8B,GAAR,OACnH,kBAAC,EAAD,CAAOC,IAAKD,EAAO9B,MAAOA,UC/EhBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.635867bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header =({title}) =>{\r\n    return(\r\n        <header className=\"App-header\">\r\n            <h2>{title}</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\n\r\nconst Serach = (props) =>{\r\n\r\n    const [searchValue, setSearchValue] =useState(\"\");\r\n    \r\n    const handleSearchInputChanges =(e) =>{\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    const resetInputFild =()=>{\r\n        setSearchValue(\"\");\r\n    }\r\n\r\n    const callSearchFunction =(e) =>{\r\n        e.preventDefault();\r\n        props.search(searchValue);\r\n        resetInputFild();\r\n    }\r\n    return(\r\n        <form className=\"search\">\r\n            <input\r\n            value ={searchValue}\r\n            onChange={handleSearchInputChanges}\r\n            type=\"text\"\r\n            ></input>\r\n              <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Serach;\r\n\r\n","import React from 'react';\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\nconst Movie =({movie}) =>{\r\n\r\n    const poster = movie.Poster ===\"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return(\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <div>\r\n                <img\r\n                width=\"200\"\r\n                alt ={`The Movie Titled : ${movie.title}`}\r\n                src = {poster}\r\n                />\r\n            </div>\r\n            <p>({movie.Year})</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { useState, useEffect, useReducer } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Search from './components/Serach';\r\nimport Movie from './components/Movie';\r\n\r\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\r\n\r\nconst initState = {\r\n  loading: false,\r\n  movies: [],\r\n  error: false\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SEARCH_MOVIES_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n    case \"SEARCH_MOVIES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        movies: action.payload\r\n      };\r\n    case \"SEARCH_MOVIES_FAILURE\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        erorr: action.error\r\n      };\r\n    default:\r\n      return state;\r\n\r\n  }\r\n\r\n}\r\n\r\nconst App = () => {\r\n\r\n  const [state,dispatch] = useReducer(reducer,initState);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(MOVIE_API_URL)\r\n      .then(response => response.json())\r\n      .then(jsonResponse=>{\r\n        dispatch(\r\n          {\r\n            type:\"SEARCH_MOVIES_SUCCESS\",\r\n            payload:jsonResponse.Search\r\n          }\r\n        )\r\n      })\r\n  }, []);\r\n\r\n\r\n  const search = searchValue => {\r\n    dispatch({\r\n      type :\"SEARCH_MOVIES_REQUEST\",\r\n    });\r\n\r\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\r\n    .then(response => response.json())\r\n    .then(jsonResponse => {\r\n      if (jsonResponse.Response === \"True\") {\r\n        dispatch({\r\n            type: \"SEARCH_MOVIES_SUCCESS\",\r\n            payload: jsonResponse.Search\r\n        });\r\n      } else {\r\n        dispatch({\r\n            type: \"SEARCH_MOVIES_FAILURE\",\r\n            error: jsonResponse.Error\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nconst { movies, error, loading } = state;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title={\"HOOKED\"} />\r\n      <Search search={search}></Search>\r\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\r\n      <div className=\"movies\">\r\n        {loading && !error ? (<span>loading...</span>) : error ? (<div className=\"errorMessage\">{error}</div>) : (movies.map((movie, index) => (\r\n          <Movie key={index} movie={movie} />\r\n        )))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}